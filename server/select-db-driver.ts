/**
 * Script para selecionar o driver de banco de dados a ser usado
 * Oferece op√ß√£o entre usar o driver Neon Serverless ou o driver pg padr√£o
 */

import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { fileURLToPath } from 'url';

// Necess√°rio para obter __dirname em ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Caminhos para os arquivos
const neonDriverPath = path.join(__dirname, 'db.ts');
const pgDriverPath = path.join(__dirname, 'db-pg.ts');
const dbBackupPath = path.join(__dirname, 'db.ts.bak');

// Verifica se os arquivos existem
if (!fs.existsSync(neonDriverPath)) {
  console.error('‚ùå Erro: O arquivo db.ts n√£o foi encontrado.');
  process.exit(1);
}

if (!fs.existsSync(pgDriverPath)) {
  console.error('‚ùå Erro: O arquivo db-pg.ts n√£o foi encontrado.');
  process.exit(1);
}

// Cria uma interface para leitura da entrada do usu√°rio
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Fun√ß√£o para detectar qual driver est√° sendo usado atualmente
function detectCurrentDriver(): 'neon' | 'pg' | 'unknown' {
  try {
    const dbContent = fs.readFileSync(neonDriverPath, 'utf8');
    
    if (dbContent.includes('drizzle-orm/neon-serverless')) {
      return 'neon';
    } else if (dbContent.includes('drizzle-orm/node-postgres')) {
      return 'pg';
    } else {
      return 'unknown';
    }
  } catch (error) {
    console.error('‚ùå Erro ao ler arquivo db.ts:', error);
    return 'unknown';
  }
}

// Fun√ß√£o para fazer backup do arquivo atual
function backupCurrentFile() {
  try {
    fs.copyFileSync(neonDriverPath, dbBackupPath);
    console.log('‚úÖ Backup do arquivo db.ts criado como db.ts.bak');
  } catch (error) {
    console.error('‚ùå Erro ao criar backup:', error);
  }
}

// Fun√ß√£o para trocar o driver
function switchToDriver(driver: 'neon' | 'pg') {
  try {
    // Primeiro, fazer backup do arquivo atual
    backupCurrentFile();
    
    // Depois, copiar o arquivo escolhido
    if (driver === 'neon') {
      // Como db.ts j√° √© o driver Neon, n√£o precisamos copi√°-lo de volta
      console.log('‚úÖ Mantendo o driver Neon Serverless.');
    } else {
      // Copiar o arquivo pg-driver.ts para db.ts
      fs.copyFileSync(pgDriverPath, neonDriverPath);
      console.log('‚úÖ Substitu√≠do por driver PostgreSQL padr√£o.');
    }
    
    console.log('\nüöÄ Pronto! Reinicie o servidor (npm run dev) para aplicar as altera√ß√µes.');
  } catch (error) {
    console.error('‚ùå Erro ao trocar driver:', error);
  }
}

// Detectar driver atual
const currentDriver = detectCurrentDriver();
console.log('---------------------------------------------');
console.log('üîç Seletor de Driver de Banco de Dados');
console.log('---------------------------------------------');

if (currentDriver === 'neon') {
  console.log('üìä Driver atual: Neon Serverless (adaptador para produ√ß√£o)');
} else if (currentDriver === 'pg') {
  console.log('üìä Driver atual: PostgreSQL padr√£o (melhor para desenvolvimento local)');
} else {
  console.log('üìä Driver atual: N√£o identificado');
}

console.log('\nEscolha qual driver deseja usar:');
console.log('  1. üå©Ô∏è  Neon Serverless (recomendado para produ√ß√£o)');
console.log('  2. üêò PostgreSQL padr√£o (recomendado para desenvolvimento local)');
console.log('  3. ‚ùå Cancelar e sair');

rl.question('\nDigite o n√∫mero da op√ß√£o desejada (1-3): ', (answer) => {
  switch (answer.trim()) {
    case '1':
      switchToDriver('neon');
      break;
    case '2':
      switchToDriver('pg');
      break;
    case '3':
      console.log('Opera√ß√£o cancelada. Nenhuma altera√ß√£o foi feita.');
      break;
    default:
      console.log('Op√ß√£o inv√°lida. Nenhuma altera√ß√£o foi feita.');
  }
  
  rl.close();
});